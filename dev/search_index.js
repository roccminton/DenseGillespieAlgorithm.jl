var documenterSearchIndex = {"docs":
[{"location":"index.html#The-DenseGillespieAlgorithm-Module","page":"Index","title":"The DenseGillespieAlgorithm Module","text":"","category":"section"},{"location":"index.html#Module-Index","page":"Index","title":"Module Index","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Modules = [DenseGillespieAlgorithm]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"index.html#Detailed-API","page":"Index","title":"Detailed API","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Modules = [DenseGillespieAlgorithm]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"index.html#DenseGillespieAlgorithm.chooseevent-Tuple{Any, Any}","page":"Index","title":"DenseGillespieAlgorithm.chooseevent","text":"chooseevent(rates::Vector{Float64},total_rate::Float64;<keyword arguments>)\n\nFrom the vector of total rates choose at random one of the indices of the vector according to their rates. The value 0 is returned if the total rates are positive, but too smale to let the evolution continue. The maximum number of tries is set by max_try=1000.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.mainiteration!-Union{Tuple{F3}, Tuple{F2}, Tuple{F1}, Tuple{Any, Any, Any, Any, Any, Any, F1, F2, F3, Any}} where {F1, F2, F3}","page":"Index","title":"DenseGillespieAlgorithm.mainiteration!","text":"mainiteration!\n\nFor models where population states are dictionaries (or vectors) with the traits as\nkeys and the subpopulation size as values. Here the population history is\nitselfe a dictionary with the same keys and the individual subpopulation\nhistory as a vector for every trait.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.mainiteration!-Union{Tuple{F3}, Tuple{F2}, Tuple{F1}, Tuple{Any, Any, Real, Any, Any, Any, F1, F2, F3, Any}} where {F1, F2, F3}","page":"Index","title":"DenseGillespieAlgorithm.mainiteration!","text":"mainiteration!\n\nFor OneType model where the population state is a number and\nthe population history is a vector.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.nexteventandtime-Tuple{Any}","page":"Index","title":"DenseGillespieAlgorithm.nexteventandtime","text":"nexteventandtime(rates::Vector{Float64})\n\nSamples a exponential distributed random variable to determine the time for the next event and calls choose_event. The return value is a tuple consiting of the envent index returned by choose_event and the time to the next event.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.onestep!-Union{Tuple{F2}, Tuple{F1}, Tuple{Any, Any, Any, Any, Any, F1, F2}} where {F1, F2}","page":"Index","title":"DenseGillespieAlgorithm.onestep!","text":"Executes one step of the evolution by modifying x_0 and rates.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.sumsumdict-Tuple{Any}","page":"Index","title":"DenseGillespieAlgorithm.sumsumdict","text":"For a dictionary with vectors of values calculates the sum of all values of all vectors combined.\n\n\n\n\n\n","category":"method"}]
}
