var documenterSearchIndex = {"docs":
[{"location":"examples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Three illustrative examples are provided. The first is a minimal working example, designed to facilitate the initial implementation of the framework on the user's machine. The second is a slightly more advanced example, which illustrates the use of an uncountable trait space. The third is a highly complex example, which demonstrates the comprehensive versatility of the package.","category":"page"},{"location":"examples.html#SIR-Model","page":"Examples","title":"SIR-Model","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The SIR model is a tree-dimensional model that is used to model infectious diseases. It is a simple model that assumes that individuals can be placed into one of three categories: susceptible, infected, or recovered. Infected individuals can infect susceptible individuals through random interactions. After becoming infected, individuals can recover and become immune. For more details, see for example here.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The initial step is to implement the fundamental interaction functions. In this scenario, two events are occurring: infection and recovery. The objective is to implement these functions in a manner that modifies the population state, which is represented as a vector with three entries, one for each possible state of an individual.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using Plots\nusing DenseGillespieAlgorithm\n\n# Define the reactions\nfunction infection!(x)\n    x[1] += -1\n    x[2] += 1\n    nothing\nend\n\nfunction recovery!(x)\n    x[2] += -1\n    x[3] += 1\n    nothing\nend","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The subsequent step is to combine the aforementioned two functions into a single execute function, which will subsequently be provided to the algorithm.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"#Combine all reactions into one execute! function\nfunction execute!(i,x,par)\n    if i == 1\n        infection!(x)\n    elseif i == 2\n        recovery!(x)\n    else\n        error(\"Unknown event number i = $i\")\n    end\n    nothing\nend","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Furthermore, define the rate at which the events occur, which also depends on the population state. It should be noted that a modification of an existing variable that holds the current rates is necessary. In this case, as there are two events, namely infection and recovery, the rates variable will be a vector with two entries.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"# Define the reactions (reaction rates and species interactions)\nfunction rates!(rates,x,par)\n    #rate of infection\n    rates[1] = par.β * x[1] * x[2]\n    #rate of recovery\n    rates[2] = par.γ * x[2]\n    nothing\nend","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Prior to commencing the study, it is essential to define all relevant model parameters. These include the interaction rates, the initial population state and the time horizon for the simulation. Prior to commencing the simulation, it is essential to define all relevant model parameters. These include the interaction rates, the initial population state and the time horizon for the simulation. Additionally, it is necessary to provide the algorithm with an empty population history, which will be populated with data during runtime.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"#Define the model parameter \npar = (\n    β = 0.000005,\n    γ = 0.005\n    )\n\n# Define the initial state of the system \nx0 = [9999,1,0]\n\n# Define the time horizon for the simulation\nt = 0:2000\n\n# Initialize population history\nhist = zeros(Int,(length(t),3))","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"At this point in the process, all the necessary components have been put in place, and the task can be handed over to the core function of the package. Once the simulation has been executed, the results are plotted.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"# Run the simulation\nrun_gillespie!(\n        t,x0,par,\n        execute!,rates!,\n        Vector{Float64}(undef,2),hist\n        )\n\n# Analyze or plot the result (example with a simple print)\nplot(hist,label=[\"S\" \"I\" \"R\"])","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"(Image: SIR Plot)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"note: Note\nWhile it is feasible to construct such straightforward examples using the DenseGillespieAlgorithm, this is not the typical application. For relatively simple models, the JumpProcess.jl package offers greater flexibility and facilitates the implementation process.","category":"page"},{"location":"examples.html#Continuous-trait-space","page":"Examples","title":"Continuous trait space","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"In this example, we consider an individual-based model of adaptive dynamics, wherein the trait space is a subset of the real line. It is therefore impossible to list all the types and interaction rates between them, as there are uncountably many. It is thus necessary to implement the rates and interactions in a dynamic manner. ","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"In the context of adaptive dynamics models, individuals are characterised by a specific trait, which in this case is a real number. The mortality and fertility rates of individuals are contingent upon this trait. Moreover, competition among individuals is contingent upon the trait in question. Furthermore, at birth, with a probability of μ, the offspring undergoes a mutation and displays a distinct trait in comparison to its parents. ","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"For further insight into the subject of adaptive dynamics models, we would direct the reader to the lecture notes by Anton Bovier.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"We present a specific case study of an adaptive dynamics model, originally proposed by Dieckmann and Doebeli[Dieckmann99]. Here the trait space is mathcalX = -11 subset mathbbR. The birth rate is given by b(x)=exp(-x^22sigma^2_b) for some sigma_b  0. The death rate is constant d(x) = d and the competion between individuals depends only on theri distance by c(xy)=exp(-(x-y)^22sigma^2_c) for some sigma_c  0. Moreover the mutation kernel, that chooses the new trait of an offspring at birth is a Gaussian law with mean 0 and variance 01 conditioned to -11.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"[Dieckmann99]: U. Dieckmann, M. Doebeli, On the origin of species by sympatric speciation. Nature 400:354-357, 1999","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The next step is to begin the implementation of this model, starting with the rates function.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using Distributions\n\n#birth rate\nb(x, σ) = exp(-x^2 / (2σ^2))\n#death rate\nd(x,d) = d\n#competiton kernel\nc(x, y, σ, K) = inv(K) * exp(-(x - y)^2 / (2σ^2))\n#mutation kernel\nmutation(x) = rand(truncated(Normal(x, 0.1), -1, 1))\n","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Given that we anticipate a relatively limited number of distinct traits to be present at any given time, but a considerable number of representatives for any given trait that we elect to implement this model with, we have opted to utilise dictionaries. Each trait is a key within the dictionary, with the value being a triple consisting of the size of the subpopulation and its intrinsic birth and death rate. By saving the birth and death rate, the need for repeated recalculation of the same rate in each step is avoided; instead, the rate is simply read from the dictionary. To illustrate,starting in a monomorphic equilibrium at the boudary x_0 = -1, the initial population state would be as follows.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"x0 = -1.0\n\nn0 = Dict(\n        x0 => [\n                (b(x0, σ_b) - d(x0,d)) / c(x0,x0,σ_c, K),\n                b(x0, σ_b),\n                d(x0,d)\n                ]\n        )","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"In this manner, the rate values for each trait are stored in a cache once they are incorporated into the population. A similar approach is employed for the competition rates between individuals, with a dedicated dictionary being established to accommodate the various competition rates. In order to establish the competition dictionary, it is necessary to define the following function.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"#Generate a cach dictionary for all competition rates between individuals from the population state ps\nfunction generatecompdict(ps,competition)\n    IndividualType = keytype(ps)\n    Individuals = collect(keys(ps))\n    #generate empty dictionary\n    C = Dict{\n        Tuple{IndividualType,IndividualType},\n        Real\n        }()\n    #populate dictionary\n    for x in keys(ps), y in keys(ps)\n        C[(x,y)] = competition(x,y)\n    end\n    return C\nend","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The cached values will be passed to the functions via the parameter variable. Additionally, the birth, death, mutation and competition functions, with their fixed parameter values, will be stored there. Furthermore, it is necessary to adjust all model parameters, including the variances of the Gaussian birth and competition rates, the population size, and the time frame.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"t = 0:1000\n\npar = (\n        birth = x -> b(x, 0.9),\n        death = x -> d(x,0.0),\n        competition = (x, y) -> c(x, y, 0.8, 1000),\n        mutate = mutation,\n        μ = 0.00015,\n        K = 1000,\n        compdict = generatecompdict(n0,(x, y) -> c(x, y, 0.8, 1000)),\n        historylength = length(t)\n)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"info: History length\nAs the population history will be stored in the dictionary, it is necessary to inform the algorithm of the duration of the simulation. To this end, the field \"historylength\" must be added to the parameter variable.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The next step is to define the rates function. In this case, the rates are also provided as a dictionary. Each subpopulation has two rates: a birth rate and a death rate. These are calculated from the cache and written to the dictionary.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"#define rates function\nfunction rates!(rates::Dict,ps::Dict,pr)\n    #iterate through current population\n    for (x,vₓ) in ps\n        #size of subpopulation\n        nₓ = vₓ[1]\n        #check if rates are already cached, if not do so\n        !haskey(rates,x) && (rates[x] = valtype(rates)(undef,2))\n        #birthrate n_x * b(x)\n        rates[x][1] = nₓ*vₓ[2]\n        #deathrate n_x * (d(x) + Σ c(x,y) n_y)\n        rates[x][2] = nₓ* vₓ[3]\n        for (traittuple,c) in pr.compdict\n            t₁,t₂ = traittuple\n            t₁ == x && (rates[x][2] += nₓ * ps[t₂][1] * c)\n        end\n    end\nend","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The process of adding a new trait to the population at birth is rendered challenging by the presence of extensive caching, particularly in relation to competition rates. Consequently, a preliminary function is first devised to facilitate the addition of new traits to the population, prior to the implementation of the birth! and death! functions.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"#add a new trait to current population\nfunction addnewtrait!(ps,rates,par,trait)\n    #add to population state\n    ps[trait] = [par.diff,par.birth(trait),par.death(trait)]\n    #set competition\n    for other_trait in keys(ps)\n        par.compdict[(trait,other_trait)] = par.competition(trait,other_trait)\n        par.compdict[(other_trait,trait)] = par.competition(other_trait,trait)\n    end\nend","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The birth! and death! functions can now be defined with relative ease and combined into a single execute! function.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"function birth!(ps, rates, par, trait)\n    #Birth with or without mutation\n    if par.μ > 0.0 && rand() ≤ par.μ\n        #mutate to new type/species and add to species\n        new_trait = par.mutate(trait)\n        #setup the size of the new type\n        if haskey(ps,new_trait)\n            ps[new_trait][1] += par.diff\n        else\n            addnewtrait!(ps,rates,par,new_trait)\n        end\n    else\n        ps[trait][1] += par.diff\n    end\n    nothing\nend\n\nfunction death!(ps,trait,pr)\n    ps[trait][1] -= pr.diff\nend\n\nfunction execute!(i,trait,ps,rates,pr)\n    if i==1\n        birth!(ps, rates, pr, trait)\n    elseif i==2\n        death!(ps,trait,pr)\n    else\n        error(\"Index Error: Unknown event #$i\")\n    end\nend","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"To initiate the simulation, it is merely necessary to establish an empty rates dictionary and population history, and then to execute the run_gillespie! function.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"#empty population history\nhist = Dict(x=>zeros(eltype(valtype(n0)),length(t)) for x in keys(n0))\n#empty rates dictionary (gets populated in first iteration)\ninitrates = Dict{keytype(n0),Vector{Real}}()\n\n#execute the simulation\nrun_gillespie!(\n        t,\n        n0,\n        par,\n        execute!,\n        rates!,\n        initrates,\n        hist\n)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"To observe the findings, the size of the subpopulations is plotted over time, with the different traits represented by varying colours.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using Plots\n\n#setup plot\np=plot(legend=false)\n\n#function to determine the color of the trait\nfunction c(x)\n    #find the biggest and smallest key in the population history\n    min = min(keys(hist)...)\n    max = max(keys(hist)...)\n    \n    #if there ever has been only one trait return 1 otherwise a color inbetween \n    if min == max\n        return 1\n    else\n        return floor(Integer,((x-min)/(max-min)) * length(cgrad(:thermal))-1) + 1\n    end\nend\n\nfor (x,his_x) in history\n    plot!(p,time,his_x,color=cgrad(:thermal).colors.colors[c(x)])\nend\n\np","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"(Image: Simulation result with a mutation rate of 1/K)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"warning: Mutation rate\nIn this scenario, the runtime of the algorithm is highly dependent on the mutation rate. An increase in the mutation rate results in a greater number of different traits. This implementation with dictionaries is most suited for a small number of traits being alive at the same time. However, if the mutation rate is increased to levels of frequent mutation, it is recommended that dictionaries are not used, but instead vectors should be employed for saving the data. The following example demonstrates this technique.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"tip: Population size\nNevertheless, increasing the population size in this scenario does not significantly prolong the runtime of the algorithm. This is an advantage of using dictionaries and caching the competition. However, this approach is only effective when the mutation rate is scaled with the population size (as demonstrated in the above example).","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"info: Empty cache\nIt should be noted that the algorithm performs regular checks for subpopulations in the dictionary with a population size of zero. In the event that such subpopulations are identified, they are removed in order to prevent an excessive expansion of the dictionary. This process is carried out by the DenseGillespieAlgorithm.dropzeros! function.","category":"page"},{"location":"examples.html#High-dimensional-model","page":"Examples","title":"High-dimensional model","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The final example we will present is the most complex. We implement a model to analyse the dynamics of complete recessive lethal diseases. Each disease is triggered by the mutation of a gene and is expressed only in a homozygous state. Therefore, the traitspace for this model is mathcalX=01^2times N where N is the number of genes. A detailed description and results of numerous simulations with this exact framework can be found here[LaRocca24].","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"[LaRocca24]: L. A. La Rocca, K. Gerischer, A. Bovier, and P. M. Krawitz. Refining the drift barrier hypothesis: a role of recessive gene count and an inhomogeneous muller's ratchet, 2024","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Individuals expressing a disease are excluded from the mating process. At birth, each individual randomly selects a fit partner from the population. Following the process of recombination, whereby the diploid genetic information is reduced to a haploid zygote incorporating crossover events, the gametes of the two parents fuse to form a new offspring. New mutations emerge at a constant rate. ","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Given that there are 2^2N potential configurations with interactions between them, it is not feasible to enumerate them all prior to the start of the simulation.  Furthermore, it is of no particular interest to ascertain the precise genetic configuration of the entire population. Typically, one is only concerned with summary statistics, such as the mutation burden (the average number of mutations per individual) and the prevalence (the fraction of individuals affected by a disease). It is therefore only these statistics that will be retained for subsequent analysis. However, for the propagation of the population dynamics, it is essential to have access to the exact configurations. To be more precise, the total birth and death rates can be calculated via the summary statistics, which we utilise. However, in order to employ an offspring, the configurations are required.","category":"page"},{"location":"perform.html#Performance-Tips","page":"Performance Tips","title":"Performance Tips","text":"","category":"section"},{"location":"perform.html","page":"Performance Tips","title":"Performance Tips","text":"One of the key benefits of the Gillespie algorithm is its ability to trace a single, precise stochastic trajectory. Nevertheless, in order to achieve this for each individual event, the rates must be calculated and re-calculated whenever there is a change in the population configuration. This makes the algorithm computationally demanding. There are numerous modifications that can be made in order to enhance performance, such as tau-leaping[Gillespie01]. However, in this section, our objective is to maintain the precision of the stochastic simulation and to identify potential bottlenecks and strategies for optimising the performance of the simulation in its current form.","category":"page"},{"location":"perform.html","page":"Performance Tips","title":"Performance Tips","text":"[Gillespie01]: D.T. Gillespie. Approximate accelerated stochastic simulation of chemically reacting systems. Journal of Chemical Physics, 115(4):1716-1733, 2001","category":"page"},{"location":"manual.html#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual.html","page":"Manual","title":"Manual","text":"The DenseGillespieAlgorithm framework is designed to assist researchers in simulating their complex models in an exact stochastic manner. It is the responsibility of the user to implement all model-specific functions, such as those pertaining to birth and death events or rate functions. Once this has been done, the framework executes the Gillespie Algorithm and saves the population history. The following section provides an overview of the main function of this package.","category":"page"},{"location":"manual.html#Installation","page":"Manual","title":"Installation","text":"","category":"section"},{"location":"manual.html#Install-from-GitHub","page":"Manual","title":"Install from GitHub","text":"","category":"section"},{"location":"manual.html","page":"Manual","title":"Manual","text":"You can install the package directly from this GitHub repository:","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"using Pkg\nPkg.add(\"https://github.com/roccminton/DenseGillespieAlgorithm.jl\")","category":"page"},{"location":"manual.html#Install-from-Julia","page":"Manual","title":"Install from Julia","text":"","category":"section"},{"location":"manual.html","page":"Manual","title":"Manual","text":"Once the package is registered in the official Julia package registry, you can install it via:","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"using Pkg\nPkg.add(\"DenseGillespieAlgorithm\")","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"This will install the latest stable version of the package and all required dependencies.","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"note: Package dependencies\nWhen loading the package directly from GitHub, the following packages must be available Random, Distributions, ProgressMeter, SparseArrays","category":"page"},{"location":"manual.html#Setting-up-the-model-functions","page":"Manual","title":"Setting up the model functions","text":"","category":"section"},{"location":"manual.html","page":"Manual","title":"Manual","text":"The initial step is to define all interaction functions for the model. In population models, these are typically limited to two: birth and death. However, there is no upper limit on the number of interactions that can be included. As the number of fundamentally different interactions increases, the efficiency of the algorithm is reduced. The framework is speciallised to a small number of different events.","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"Subsequently, all the interaction functions should be incorporated into a single execute function. This function must accept three inputs: an index, the current population state, and the model parameter. The index specifies which of the defined events should be executed. The current population state is then modified by the event functions. ","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"    execute!(i,x,par)","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"Next we need to define the rates function. There must be as many rates as there are interaction events. Therefore the variable initrates is usually a Vector with as many entries as there are events. The rates function takes as input the inital rates, the current population state and the additional model parameters. The function should calculate the rates according to the population state and modify the initrates accordingly.","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"    rates!(initrates,x,par)","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"note: Function names\nThe function name may be designated as desired, as they are passed to the ` function. The nomenclature is inconsequential.","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"danger: Function signature\nNevertheless, it is crucial to maintain the original function signature, which entails retaining the sequence and the number of arguments as they are called within the algorithmic structure.","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"tip: Parameter variable\nThere are no restrictions on the parameter variable par. Any additional information used to calculate rates and to change the current population state can be added to the parameter element that is passed through all functions. For example, if you want to know the current time of the simulation within the functions you run for time-inhomogeneous models, you could add this to your model parameter.","category":"page"},{"location":"manual.html#Setting-up-the-model-parameter,-population-history-and-initial-population","page":"Manual","title":"Setting up the model parameter, population history and initial population","text":"","category":"section"},{"location":"manual.html","page":"Manual","title":"Manual","text":"The final step before running the simulation is to define the model parameters, including the time horizon of the simulation and the initial population state, as well as a blank population history.","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"The time horizon of the simulation is tipically a UnitRange, but can be anything that can be enumerated.  The type of initial population state should correspond to the functionalities defiend in the function rates! and execute! as they use and modify this type.  The empty population history should also match the type of population state, as it will be copied into the population history. In addition, if the population history is a vector or matrix, it should be at least as long as the time horizon. You can customise the saving process with your own Statistics! function. In this case, you will have to adapt the coupling history to the functionalities of this function. For more details, see Customized Statistics","category":"page"},{"location":"manual.html#Execute-the-simulation","page":"Manual","title":"Execute the simulation","text":"","category":"section"},{"location":"manual.html","page":"Manual","title":"Manual","text":"With everything in place, it is time to run the simulations. To do this, call the run_gillespie! function from the package. ","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"run_gillespie!","category":"page"},{"location":"manual.html#DenseGillespieAlgorithm.run_gillespie!","page":"Manual","title":"DenseGillespieAlgorithm.run_gillespie!","text":"    run_gillespie!(time,n₀,par,execute!,rates!,initrates,population_history[,hstart=0,statistic!])\n\nRun a exact stochastic simulation, return and fill the population_history.\n\nArguments\n\ntime::AbstracVector: time interval for the simulation\nn₀: initial population state\npar: additional parameter (gets passed to execute! and rates!)\nexecute!: execute function\nrates!: rates function\ninitrates: initial rates\npopulation_history: empty population history\nhstart=0: time shift for parameter change (opitonal)\nstatistic!: additional statistic function (optional)\n\nExtended help\n\nNote that n₀,initrates,population_history all three get modified during the simulation\nThe algorithm expects the execute! function to have the following signature   julia   execute!(i::Number,n₀,par)   where the i is the event that gets executed and the population state n₀ gets modified accordingly.   The only exception is when the initrates are given as a dictionary. In that case the signature is execute!(i,trait,n₀,initrates,par), where 'trait'   is the key that is modified.\nThe algorithm expects the rates! function to have the following signature   julia   rates!(initrates,n₀,par)   where the rates get modified according to the current population state given in n₀.\nThe algorithm expects the statistic! function to have the following signature   julia   statistic!(population_hist,t,n₀,par)   where the population history gets modified at position t with the current population state n₀.\nNote that the population_history needs to be accessable via index from 1 to length(time), or if hstart is given from 1+hstart to length(time)+hstart. Unless a specified statistic! function is given.\nNote that the initial population state n₀ must match the population_history in the sense that population_history :: Vector{typeof(n₀)}.  Unless a specified statistic! function is given.\nThe parameter variable par is passed through all functions (execute!,rates!,statistics!), thereby affording the user additional flexibility.\n\n\n\n\n\n","category":"function"},{"location":"manual.html","page":"Manual","title":"Manual","text":"Once the simulation has reached its conclusion, the modified population history is returned for further analysis.","category":"page"},{"location":"manual.html#Customized-Statistics","page":"Manual","title":"Customized Statistics","text":"","category":"section"},{"location":"manual.html","page":"Manual","title":"Manual","text":"For many high-dimensional models, the exact configuration at any given time is too much information. In many cases only summery statistics are needed. To avoid accumulating too much data during the runtime of the algorithm that is not needed afterwards, you can define your own statistics! function. In this case, only the information you want to collect is stored for further analysis.","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"As for the rates! and execute! functions, the function signature is of particular significance. The function accepts as input the population history, which is modified by the function and the current time index, hence the index at which the statistics of the current population state are saved. Additionally, the current state and the model parameter are required.","category":"page"},{"location":"manual.html","page":"Manual","title":"Manual","text":"    statistics!(population_history,t,x,par)","category":"page"},{"location":"index.html#Public-API","page":"Public API","title":"Public API","text":"","category":"section"},{"location":"index.html","page":"Public API","title":"Public API","text":"Puplic documentation of all internal functions. ","category":"page"},{"location":"index.html#Detailed-API","page":"Public API","title":"Detailed API","text":"","category":"section"},{"location":"index.html","page":"Public API","title":"Public API","text":"Modules = [DenseGillespieAlgorithm]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"index.html#DenseGillespieAlgorithm.chooseevent-Tuple{Any, Any}","page":"Public API","title":"DenseGillespieAlgorithm.chooseevent","text":"chooseevent(rates::Vector{Float64},total_rate::Float64)\n\nChoose from the vector of total rates at random one of the indices of the vector according to their rates.\nThe value 0 is returned if the total rates are positive, but too smale to let the evolution continue.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.chooseevent-Tuple{Dict, Any}","page":"Public API","title":"DenseGillespieAlgorithm.chooseevent","text":"chooseevent(rates::Dict,total_rate::Float64)\n\nChoose from the dictionary of total rates at random one of the keys of the dictionary according to their values.\nThe value 0 is returned if the total rates are positive, but too smale to let the evolution continue.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.dropzeros!-Tuple{Any}","page":"Public API","title":"DenseGillespieAlgorithm.dropzeros!","text":"dropzeros!(ps)\n\nDo nothing for non-dictionary inputs.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.dropzeros!-Tuple{Dict{<:Any, <:Vector}}","page":"Public API","title":"DenseGillespieAlgorithm.dropzeros!","text":"dropzeros!(ps::Dict{Any,Vector})\n\nEliminates all key value pairs for which the the firts entry of the vector of the value is zero.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.historylength-Tuple{Vector, Any}","page":"Public API","title":"DenseGillespieAlgorithm.historylength","text":"historylength(population_hisotry,par)\n\nReturn the simulation time based on the length of the population history.\nIf the population history is neither a `Vector` nor a `Matrix` it is assumed that the Parameter has a field called `historylength` that is then returned.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.mainiteration!-Union{Tuple{F3}, Tuple{F2}, Tuple{F1}, Tuple{Any, Any, Any, Any, Any, Any, F1, F2, F3, Any}} where {F1, F2, F3}","page":"Public API","title":"DenseGillespieAlgorithm.mainiteration!","text":"mainiteration!(pop_hist,rates,n0,ct,time,par,ex!::F1,r!::F2,stat!::F3,hstart)\n\nMainiteration of the GillespieAlgorithm for complex models.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.mainiteration!-Union{Tuple{F3}, Tuple{F2}, Tuple{F1}, Tuple{Any, Any, Real, Any, Any, Any, F1, F2, F3, Any}} where {F1, F2, F3}","page":"Public API","title":"DenseGillespieAlgorithm.mainiteration!","text":"mainiteration!(pop_hist,rates,n0::Real,ct,time,par,ex!::F1,r!::F2,stat!::F3,hstart)\n\nMainiteration of the GillespieAlgorithm for OneType Models where the population state is a number and the population history is a vector.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.nexteventandtime-Tuple{Any}","page":"Public API","title":"DenseGillespieAlgorithm.nexteventandtime","text":"nexteventandtime(rates::Vector{Float64})\n\nSample a exponential distributed random variable to determine the time for the next event and calls `choose_event`.\nThe return value is a tuple consiting of the envent index returned by `choose_event` and the time to the next event.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.nexteventandtime-Tuple{Dict}","page":"Public API","title":"DenseGillespieAlgorithm.nexteventandtime","text":"nexteventandtime(rates::Dict)\n\nSample a exponential distributed random variable to determine the time for the next event and calls `choose_event`.\nThe return value is a triple consiting of the envent index and trait returned by `choose_event` and the time to the next event.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.onestep!-Union{Tuple{F2}, Tuple{F1}, Tuple{Any, Any, Any, Any, Any, F1, F2}} where {F1, F2}","page":"Public API","title":"DenseGillespieAlgorithm.onestep!","text":"onestep!(x_0,rates,t_0,t_end,par,ex!::F1,r!::F2)\n\nExecute one step of the evolution by modifying `x_0` and `rates` and returning the current time `t_0`.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.run_gillespie!-Union{Tuple{F3}, Tuple{F2}, Tuple{F1}, Tuple{Any, Any, Any, F1, F2, Any, Any}} where {F1, F2, F3}","page":"Public API","title":"DenseGillespieAlgorithm.run_gillespie!","text":"    run_gillespie!(time,n₀,par,execute!,rates!,initrates,population_history[,hstart=0,statistic!])\n\nRun a exact stochastic simulation, return and fill the population_history.\n\nArguments\n\ntime::AbstracVector: time interval for the simulation\nn₀: initial population state\npar: additional parameter (gets passed to execute! and rates!)\nexecute!: execute function\nrates!: rates function\ninitrates: initial rates\npopulation_history: empty population history\nhstart=0: time shift for parameter change (opitonal)\nstatistic!: additional statistic function (optional)\n\nExtended help\n\nNote that n₀,initrates,population_history all three get modified during the simulation\nThe algorithm expects the execute! function to have the following signature   julia   execute!(i::Number,n₀,par)   where the i is the event that gets executed and the population state n₀ gets modified accordingly.   The only exception is when the initrates are given as a dictionary. In that case the signature is execute!(i,trait,n₀,initrates,par), where 'trait'   is the key that is modified.\nThe algorithm expects the rates! function to have the following signature   julia   rates!(initrates,n₀,par)   where the rates get modified according to the current population state given in n₀.\nThe algorithm expects the statistic! function to have the following signature   julia   statistic!(population_hist,t,n₀,par)   where the population history gets modified at position t with the current population state n₀.\nNote that the population_history needs to be accessable via index from 1 to length(time), or if hstart is given from 1+hstart to length(time)+hstart. Unless a specified statistic! function is given.\nNote that the initial population state n₀ must match the population_history in the sense that population_history :: Vector{typeof(n₀)}.  Unless a specified statistic! function is given.\nThe parameter variable par is passed through all functions (execute!,rates!,statistics!), thereby affording the user additional flexibility.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.saveonestep!-Tuple{Any, Any, Dict{<:Any, <:Number}, Any}","page":"Public API","title":"DenseGillespieAlgorithm.saveonestep!","text":" saveonestep!(pop_hist,index,ps,par)\n\n Sav one step of the simulation. Generic method if no explicit statistic! function is given.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.stop!-Union{Tuple{F1}, Tuple{Any, Any, Any, Any, F1}} where F1","page":"Public API","title":"DenseGillespieAlgorithm.stop!","text":"stop!(pop_hist,index,n0,par,stat!)\n\nFill the remaining population history with the (statistic of) the current population state if the evolution came to a halt.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DenseGillespieAlgorithm.sumsumdict-Tuple{Any}","page":"Public API","title":"DenseGillespieAlgorithm.sumsumdict","text":"sumsumdict(D::Dict{String,Vector})\n\nCalculate the sum of the sums of the vectors that are the values of a dictionary.\n\n\n\n\n\n","category":"method"},{"location":"DGAPackage.html#The-DenseGillespieAlgorithm","page":"Home","title":"The DenseGillespieAlgorithm","text":"","category":"section"},{"location":"DGAPackage.html","page":"Home","title":"Home","text":"This package implements a version of the Gillespies algorithm that performs exact stochastic simulations for dense problems. The Gillespie algorithm[Gillespie76], introduced by Daniel Gillespie in 1976, is a fundamental tool for simulating the time evolution of systems with discrete, stochastic events, particularly in contexts like biochemical reactions and population dynamics. Its applications are particularly prevalent in contexts such as biochemical reactions and population dynamics. The Gillespie Algorithm is employed to simulate the behaviour of systems wherein reactions or events occur at random intervals. The algorithm generates a sequence of events and their timings by first calculating the rates at which different events or reactions occur. Subsequently, the time until the next event is determined based on these rates, and the type of event that occurs next is selected according to its probability. In the final step, the system state is updated based on the event, and the process is repeated.","category":"page"},{"location":"DGAPackage.html","page":"Home","title":"Home","text":"[Gillespie76]: D.T. Gillespie. A general method for numerically simulating the stochastic time evolution of coupled chemical reactions. Journal of Computational Physics, 22(4):403-434, 1976","category":"page"},{"location":"DGAPackage.html","page":"Home","title":"Home","text":"The Gillespie algorithm is a highly renowned and widely utilised technique across diverse communities and ecosystems. A particularly efficient, flexible and comprehensive implementation can be found in the JumpProcess.jl package within the SciML ecosystem. We strongly recommend the use of this framework wherever feasible. ","category":"page"},{"location":"DGAPackage.html","page":"Home","title":"Home","text":"However, the majority of implementations of the Gillespie algorithm require prior knowledge of all potential types and all reactions between these types before the reaction commences. A classic illustration of this is the SIR model (see Examples. The objective of our implementation in this package is to eliminate this restriction and permit the consideration of both high-dimensional systems, where the precise interactions between every conceivable combination are theoretically possible but practically infeasible, and additionally, systems where the trait space is uncountable, such as the real line. In both cases, the number of distinct traits that are present at any given time is finite, given that the population size is limited. However, new types emerge during the course of the simulation, and the interactions between these types are determined by their specific characteristics. ","category":"page"},{"location":"DGAPackage.html#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"DGAPackage.html","page":"Home","title":"Home","text":"Pages = [\"manual.md\",\"examples.md\",\"perform.md\",\"index.md\"]","category":"page"},{"location":"DGAPackage.html#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"DGAPackage.html","page":"Home","title":"Home","text":"Modules = [DenseGillespieAlgorithm]\nOrder   = [:constant, :type, :function, :macro]","category":"page"}]
}
